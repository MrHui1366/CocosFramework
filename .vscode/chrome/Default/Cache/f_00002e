{"version":3,"sources":["CRes.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\coffee_bean\\core","sourcesContent":["/**\r\n * CoffeeBean\r\n * 资源管理封装\r\n * \r\n * By Leo\r\n * \r\n */\r\n/// <reference path =\"./CMap.ts\"/>\r\nimport CLOG from \"../utils/CLOG\";\r\nimport { CMap } from \"./CMap\";\r\n\r\n/**\r\n * 是否显示资源处理Log\r\n */\r\nexport const SHOW_RESOURCE_LOG: boolean = false;\r\n\r\n/**\r\n * 资源管理类\r\n */\r\nexport default class CRes {\r\n    /**\r\n     * 缓存\r\n     * PS: Map 是 ES6的新特性，需要修改tsconfig.json 中 lib 和target 为es6\r\n     *     CMap 为框架map 适合大多数设备\r\n     */\r\n    public static cache: CMap<typeof cc.Asset, CMap<string, cc.Asset>> = new CMap<typeof cc.Asset, CMap<string, cc.Asset>>();\r\n\r\n\r\n    /**\r\n     * 读取一个目录的资源，若需要缓存，则缓存他\r\n     * @param url 要读取得目录\r\n     * @param type 要读取得资源类型\r\n     */\r\n    public static loadResDir<T extends cc.Asset>( url: string, type: { new(): T; } & typeof cc.Asset ): Promise<T[]> {\r\n        CLOG.IF( SHOW_RESOURCE_LOG, \">>> loader dir resource begin <<<\" );\r\n\r\n        // 处理url\r\n        let stand_url = this.handleResURL( url );\r\n        CLOG.IF( SHOW_RESOURCE_LOG, \"    url:\" + url + \" => \" + stand_url );\r\n\r\n        return new Promise<T[]>( ( resolve, reject ) => {\r\n            // 使用 cocos loader 来加载指定目录资源\r\n            cc.loader.loadResDir( stand_url, type, ( err: Error, assets: T[], urls: string[] ) => {\r\n                if ( err != null ) {\r\n                    CLOG.EE( err );\r\n                    return;\r\n                }\r\n                for ( let i: number = 0; i < assets.length; i++ ) {\r\n                    // 存储单元\r\n                    let cache_cell: CMap<string, cc.Asset> = null;\r\n                    let path = urls[ i ];\r\n                    if ( CRes.cache.has( type ) ) {\r\n                        cache_cell = CRes.cache.get( type );\r\n                    } else {\r\n                        cache_cell = new CMap<string, cc.Asset>();\r\n                        CRes.cache.set( type, cache_cell );\r\n                    }\r\n\r\n                    if ( cache_cell != null ) {\r\n                        if ( cache_cell.has( path ) ) {\r\n                            CLOG.W( \"[!!NOTICE!!] the url \" + path + \" has already cached! it will replace it!!\" )\r\n                        }\r\n                        cache_cell.set( path, assets[ i ] );\r\n                        CLOG.IF( SHOW_RESOURCE_LOG, \"    cache \" + path + \"  \" + assets[ i ].name );\r\n                    }\r\n                }\r\n                CLOG.IF( SHOW_RESOURCE_LOG, \"    load successful\" );\r\n                // 加载成功，返回加载的资源\r\n                resolve( assets );\r\n            } );\r\n\r\n        } );\r\n    }\r\n\r\n    /**\r\n     * 读取资源,若无缓存则缓存他\r\n     * @param url 要加载的资源URL\r\n     * @param type 资源类型 cc.SpriteFrame | cc.SpriteAtlas | cc.Texture2D | cc.AudioClip | cc.AnimationClip | cc.TextAsset | cc.JsonAsset | cc.Prefab | cc.Font | cc.BitCMapFont\r\n     * @param cache 是否缓存 默认为缓存\r\n     */\r\n    public static loadRes<T extends cc.Asset>( url: string, type: { new(): T; } & typeof cc.Asset, cache: boolean = true ): Promise<T> {\r\n        CLOG.IF( SHOW_RESOURCE_LOG, \">>> loader resource begin <<<\" );\r\n\r\n        // 处理url\r\n        let stand_url = this.handleResURL( url );\r\n        CLOG.IF( SHOW_RESOURCE_LOG, \"    url:\" + url + \" => \" + stand_url );\r\n\r\n        return new Promise<T>( ( resolve, reject ) => {\r\n            // 若已经缓存了，则直接返回缓存的数据\r\n            if ( CRes.cache.has( type ) && CRes.cache.get( type ).has( stand_url ) ) {\r\n                CLOG.IF( SHOW_RESOURCE_LOG, \"    the resource:\" + stand_url + \" has cached! return it now!\" );\r\n                CLOG.IF( SHOW_RESOURCE_LOG, \"    load successful\" );\r\n                resolve( CRes.cache.get( type ).get( stand_url ) as T );\r\n                return;\r\n            }\r\n\r\n            CLOG.IF( SHOW_RESOURCE_LOG, \"    load resource:\" + stand_url + \" type:\" + type.name );\r\n\r\n            // 使用 cocos loader 来加载指定资源\r\n            cc.loader.loadRes( stand_url, type, ( err: Error, assets: T ) => {\r\n                CLOG.IF( SHOW_RESOURCE_LOG, \"    loader resource successful asset:\" + assets.name + \" err:\" + err + \" cache:\" + cache );\r\n                if ( err == null ) {\r\n                    // 需要存储\r\n                    if ( cache ) {\r\n                        // 存储单元\r\n                        let cache_cell: CMap<string, cc.Asset> = null;\r\n                        if ( CRes.cache.has( type ) ) {\r\n                            cache_cell = CRes.cache.get( type );\r\n                        } else {\r\n                            cache_cell = new CMap<string, cc.Asset>();\r\n                            CRes.cache.set( type, cache_cell );\r\n                        }\r\n\r\n                        if ( cache_cell != null ) {\r\n                            if ( cache_cell.has( stand_url ) ) {\r\n                                CLOG.W( \"[!!NOTICE!!] the url \" + stand_url + \" has already cached! it will replace it!!\" )\r\n                            }\r\n                            cache_cell.set( stand_url, assets );\r\n                            CLOG.IF( SHOW_RESOURCE_LOG, \"    cache \" + stand_url + \"  \" + assets );\r\n                        }\r\n                    }\r\n\r\n                    CLOG.IF( SHOW_RESOURCE_LOG, \"    load successful\" );\r\n                    // 加载成功，返回加载的资源\r\n                    resolve( assets );\r\n                } else {\r\n                    CLOG.EE( err );\r\n                }\r\n            } );  // loader end\r\n        } ); // Promise end\r\n    }\r\n\r\n    /**\r\n     * 从缓存中获取一个资源\r\n     * @param url 要获取的URL\r\n     * @param type 资源类型 cc.SpriteFrame | cc.SpriteAtlas | cc.Texture2D | cc.AudioClip | cc.AnimationClip | cc.TextAsset | cc.JsonAsset | cc.Prefab | cc.Font | cc.BitCMapFont\r\n     */\r\n    public static getRes<T extends cc.Asset>( url: string, type: { new(): T } & typeof cc.Asset ): T {\r\n        let stand_url = this.handleResURL( url );\r\n        CLOG.IF( SHOW_RESOURCE_LOG, \"url:\" + url + \" => \" + stand_url );\r\n\r\n        if ( this.cache.has( type ) && this.cache.get( type ).has( stand_url ) ) {\r\n            CLOG.IF( SHOW_RESOURCE_LOG, \"find cache res ! return it\" );\r\n            return this.cache.get( type ).get( stand_url ) as T;\r\n        }\r\n\r\n        CLOG.E( \"the res:\" + stand_url + \" was not found in cache!\" );\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 释放一个资源\r\n     * 若是释放预制体则不会释放其依赖资源，依赖资源需要手动释放\r\n     * 或者调用 releasePrefab 来释放预制体极其依赖资源\r\n     * @param url 要释放的资源URL\r\n     * @param type 资源类型 cc.SpriteFrame | cc.SpriteAtlas | cc.Texture2D | cc.AudioClip | cc.AnimationClip | cc.TextAsset | cc.JsonAsset | cc.Prefab | cc.Font | cc.BitCMapFont\r\n     */\r\n    public static releaseRes<T extends cc.Asset>( url: string, type: { new(): T } & typeof cc.Asset ): boolean {\r\n        try {\r\n            CLOG.IF( SHOW_RESOURCE_LOG, \">>> release res <<<\" );\r\n\r\n            let stand_url = this.handleResURL( url );\r\n            CLOG.IF( SHOW_RESOURCE_LOG, \"    url:\" + url + \" => \" + stand_url );\r\n\r\n            let suc: boolean = true;\r\n            if ( this.cache.has( type ) && this.cache.get( type ).has( stand_url ) ) {\r\n                // 得到要释放的资源\r\n                let pb: T = this.cache.get( type ).get( stand_url ) as T;\r\n\r\n                // 销毁资源以及他在场景中的引用\r\n                CLOG.IF( SHOW_RESOURCE_LOG, \"    destory the asset:\" + pb.toString() );\r\n                pb.destroy();\r\n\r\n                // 从CMap中删除\r\n                suc = this.cache.get( type ).delete( stand_url );\r\n                CLOG.IF( SHOW_RESOURCE_LOG, \"    the res was found in cache ! so delete it first! result = \" + suc );\r\n            }\r\n\r\n            // 从loader中释放\r\n            CLOG.IF( SHOW_RESOURCE_LOG, \"    release res:\" + stand_url + \" type:\" + type.name );\r\n\r\n            // Prefab 的释放需要连依赖资源一起释放\r\n            if ( type.prototype == cc.Prefab.prototype ) {\r\n                // 从loader中得到依赖资源\r\n                let assets: any[] = cc.loader.getDependsRecursively( stand_url );\r\n                // 从loader中释放所有依赖资源\r\n                cc.loader.release( assets );\r\n            } else {\r\n                // 释放普通资源\r\n                cc.loader.releaseRes( stand_url, type );\r\n            }\r\n            CLOG.IF( SHOW_RESOURCE_LOG, \"destory successful\" );\r\n            return suc;\r\n        } catch ( exception ) {\r\n            CLOG.E( exception.toString() )\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理资源路径\r\n     * 去除resources/ 前缀\r\n     * .文件类型的影响\r\n     * @param url 资源路径\r\n     */\r\n    private static handleResURL( url: string ): string {\r\n        url = url.toLowerCase();\r\n        if ( url.startsWith( \"resources/\" ) ) {\r\n            url = url.substring( 10 );\r\n        }\r\n\r\n        const lastpoint = url.lastIndexOf( \".\" );\r\n        const lastgang = url.lastIndexOf( \"/\" );\r\n        if ( lastpoint > lastgang ) {\r\n            url = url.substring( 0, lastpoint );\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n\r\n    /**\r\n     * 创建一个缓存好的预制体到场景\r\n     * @param url 要创建的预制体地址\r\n     */\r\n    public static createPrefab( url: string ): cc.Node {\r\n        let stand_url = this.handleResURL( url );\r\n        CLOG.IF( SHOW_RESOURCE_LOG, \"url:\" + url + \" => \" + stand_url );\r\n\r\n        if ( this.cache.has( cc.Prefab ) && this.cache.get( cc.Prefab ).has( stand_url ) ) {\r\n            CLOG.IF( SHOW_RESOURCE_LOG, \"find res url:\" + stand_url + \" instantiate it now!\" );\r\n            return cc.instantiate( this.cache.get( cc.Prefab ).get( stand_url ) as cc.Prefab );\r\n        }\r\n\r\n        CLOG.E( \"url:\" + stand_url + \" was not found in cache!\" );\r\n        return null;\r\n    }\r\n} "]}