{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\coffee_bean\\network/assets\\coffee_bean\\network\\CNetwork.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\coffee_bean\\network","sourcesContent":["/** \r\n * CoffeeBean\r\n * websocket库\r\n * \r\n * By Leo\r\n */\r\nimport CLOG from \"../utils/CLOG\";\r\n\r\n\r\n/** 是否显示socket log ***/\r\nconst SHOW_SOCKET_LOG: boolean = true;\r\n\r\n/**\r\n * 网络模块\r\n */\r\nexport default class CNetwork {\r\n    /** 当前连接的服务器URL ***/\r\n    private static nowConnectServerURL: string = \"unknown\";\r\n\r\n    /** WebSocket连接 ***/\r\n    private static socket: WebSocket = null;\r\n\r\n    /** 是否已连接 ***/\r\n    private static isConnected: boolean = false;\r\n\r\n    /** 连接成功回调 ***/\r\n    private static onOpenCallback: Function = null;\r\n\r\n\r\n    /** 连接异常回调 ***/\r\n    private static onErrorCallback: Function = null;\r\n\r\n    /** 连接关闭回调 ***/\r\n    private static onCloseCallback: Function = null;\r\n\r\n    /**\r\n     * 连接到服务器\r\n     * @param URL 服务器URL\r\n     */\r\n    public static tryConnect ( url: string ): void {\r\n        CLOG.IF( SHOW_SOCKET_LOG, \"ready to connect to \" + URL );\r\n\r\n        if ( URL !== undefined ) {\r\n            // 指派了地址就连接指派的地址\r\n            this.socket = new WebSocket( url );\r\n\r\n            //记录当前准备连接的服务器地址\r\n            this.nowConnectServerURL = url;\r\n        }\r\n\r\n        //初始化事件\r\n        this.socket.onopen = this.onOpen;\r\n        this.socket.onerror = this.onError;\r\n        this.socket.onmessage = this.onMessage\r\n        this.socket.onclose = this.onClose;\r\n    }\r\n\r\n\r\n    /**\r\n     * Socket连接成功\r\n     * @param event \r\n     */\r\n    private static onOpen ( event: Event ): void {\r\n        CLOG.IF( SHOW_SOCKET_LOG, \"Server: \" + this.nowConnectServerURL + \" connected successful!\" );\r\n        this.isConnected = true;\r\n        if ( this.onOpenCallback !== null ) {\r\n            this.onOpenCallback( event )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Socket 连接错误\r\n     * @param event\r\n     */\r\n    private static onError ( event: Event ): void {\r\n        CLOG.EF( SHOW_SOCKET_LOG, \"Server: \" + this.nowConnectServerURL + \" connected error!!\" );\r\n        if ( this.onErrorCallback !== null ) {\r\n            this.onErrorCallback( event )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Socket关闭事件\r\n     * @param event\r\n     */\r\n    private static onClose ( event: Event ) {\r\n        CLOG.IF( SHOW_SOCKET_LOG, \"connected close!\" );\r\n        this.isConnected = false;\r\n\r\n        if ( this.onCloseCallback !== null ) {\r\n            this.onCloseCallback( event );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 收到消息事件\r\n     * @param event\r\n     */\r\n    private static onMessage ( event: MessageEvent ) {\r\n        if ( cc.sys.isNative ) {\r\n            let buff: Array<number> = new Array<number>( event.data );\r\n            let recStr = String.Utf8ArrayToStr( buff );\r\n\r\n            var RecvPacket = JSON.parse( recStr );\r\n\r\n            if ( SHOW_SOCKET_LOG ) {\r\n                CLOG.I( \"[RECV] << \" + recStr );\r\n            }\r\n        } else {\r\n            let reader = new FileReader();\r\n            reader.readAsText( event.data, \"UTF-8\" );\r\n            reader.onload = function ( e ) {\r\n                var RecvPacket = JSON.parse( reader.result as string );\r\n\r\n                if ( SHOW_SOCKET_LOG ) {\r\n                    CLOG.I( \"[RECV] << \" + reader.result );\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置连接成功回调\r\n     * @param callback 连接成功回调\r\n     */\r\n    public static setOpenCallback ( callback: Function ) {\r\n        this.onOpenCallback = callback;\r\n    }\r\n\r\n\r\n    /**\r\n     * 连接失败，发送、接收数据失败或者处理数据出现错误 回调\r\n     * @param callback 错误回调\r\n     */\r\n    public static setErrorCallback ( callback: Function ) {\r\n        this.onErrorCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * 设置关闭连接回调\r\n     * @param callback 关闭回调\r\n     */\r\n    public static setCloseCallback ( callback: Function ) {\r\n        this.onCloseCallback = callback;\r\n    }\r\n\r\n\r\n    /**\r\n     * 关闭Socket连接\r\n     * @constructor\r\n     */\r\n    public static Close (): void {\r\n        CLOG.I( \"ready to close socket!\" );\r\n        this.socket.close();\r\n    }\r\n}\r\n"]}