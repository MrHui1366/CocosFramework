{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\coffee_bean\\core/assets\\coffee_bean\\core\\CRes.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\coffee_bean\\core","sourcesContent":["/**\r\n * CoffeeBean\r\n * 资源管理封装\r\n * \r\n * By Leo\r\n * \r\n */\r\n/// <reference path =\"./CMap.ts\"/>\r\nimport CLOG from \"../utils/CLOG\";\r\nimport { TAG_COFFEE_BEAN, SHOW_RESOURCE_LOG } from \"../common/CGlobal\";\r\n\r\n/**\r\n * 资源管理类\r\n */\r\nexport default class CRes {\r\n    /**\r\n     * 异步读取一个目录的资源\r\n     * 并缓存他\r\n     * @param url 要读取得目录\r\n     * @param type 要读取得资源类型\r\n     */\r\n    public static loadResDirAsnyc<T extends cc.Asset> ( url: string, type: { new(): T; } & typeof cc.Asset ): Promise<T[]> {\r\n        CLOG.IF( TAG_COFFEE_BEAN, SHOW_RESOURCE_LOG, \">>> loader dir resource begin <<<\" );\r\n\r\n        // 处理url\r\n        let stand_url = this.handleResURL( url );\r\n\r\n        return new Promise<T[]>( ( resolve, reject ) => {\r\n            // 使用 cocos loader 来加载指定目录资源\r\n            cc.loader.loadResDir( stand_url, type, ( err: Error, assets: T[], urls: string[] ) => {\r\n                if ( err != null ) {\r\n                    CLOG.EE( TAG_COFFEE_BEAN, err );\r\n                    reject();\r\n                }\r\n\r\n                CLOG.IF( TAG_COFFEE_BEAN, SHOW_RESOURCE_LOG, \"    url folder:{0} load successful\", stand_url );\r\n                // 加载成功，返回加载的资源\r\n                resolve( assets );\r\n            } );\r\n\r\n        } );\r\n    }\r\n\r\n    /**\r\n     * 读取资源\r\n     * 并缓存他\r\n     * @param url 要加载的资源URL\r\n     * @param type 资源类型 cc.SpriteFrame | cc.SpriteAtlas | cc.Texture2D | cc.AudioClip | cc.AnimationClip | cc.TextAsset | cc.JsonAsset | cc.Prefab | cc.Font | cc.BitCMapFont\r\n     * @param cache 是否缓存 默认为缓存\r\n     */\r\n    public static loadRes<T extends cc.Asset> ( url: string, type: { new(): T; } & typeof cc.Asset, cache: boolean = true ): Promise<T> {\r\n        CLOG.IF( TAG_COFFEE_BEAN, SHOW_RESOURCE_LOG, \">>> loader resource begin <<<\" );\r\n\r\n        // 处理url\r\n        let stand_url = this.handleResURL( url );\r\n\r\n        return new Promise<T>( ( resolve, reject ) => {\r\n            // 使用 cocos loader 来加载指定资源\r\n            cc.loader.loadRes( stand_url, type, ( err: Error, assets: T ) => {\r\n                if ( err != null ) {\r\n                    CLOG.EE( TAG_COFFEE_BEAN, err );\r\n                    reject();\r\n                }\r\n                CLOG.IF( TAG_COFFEE_BEAN, SHOW_RESOURCE_LOG, \"    load successful\" );\r\n                // 加载成功，返回加载的资源\r\n                resolve( assets );\r\n            } );  // loader end\r\n        } ); // Promise end\r\n    }\r\n\r\n    /**\r\n     * 从缓存中获取一个资源\r\n     * @param url 要获取的URL\r\n     * @param type 资源类型 cc.SpriteFrame | cc.SpriteAtlas | cc.Texture2D | cc.AudioClip | cc.AnimationClip | cc.TextAsset | cc.JsonAsset | cc.Prefab | cc.Font | cc.BitCMapFont\r\n     */\r\n    public static getRes<T extends cc.Asset> ( url: string, type?: { new(): T } & typeof cc.Asset ): T {\r\n        let res = cc.loader.getRes( url, type );\r\n        return res as T;\r\n    }\r\n\r\n    /**\r\n     * 释放一个资源\r\n     * 默认不会释放其依赖资源\r\n     * releaseDepends传true则会释放依赖资源\r\n     * \r\n     * @param url 要释放的资源URL\r\n     * @param releaseDepends 是否释放依赖的资源\r\n     * \r\n     */\r\n    public static releaseRes ( url: string, releaseDepends: boolean = false ) {\r\n        if ( releaseDepends ) {\r\n            // 释放一个 prefab 以及所有它依赖的资源\r\n            var deps = cc.loader.getDependsRecursively( url );\r\n            cc.loader.release( deps );\r\n        } else\r\n            cc.loader.release( url );\r\n    }\r\n\r\n    /**\r\n     * 处理资源路径\r\n     * 去除resources/ 前缀\r\n     * .文件类型的影响\r\n     * @param url 资源路径\r\n     */\r\n    private static handleResURL ( url: string ): string {\r\n        let source_url = url;\r\n        url = url.toLowerCase();\r\n        if ( url.startsWith( \"resources/\" ) ) {\r\n            url = url.substring( 10 );\r\n        }\r\n\r\n        const lastpoint = url.lastIndexOf( \".\" );\r\n        const lastgang = url.lastIndexOf( \"/\" );\r\n        if ( lastpoint > lastgang ) {\r\n            url = url.substring( 0, lastpoint );\r\n        }\r\n\r\n        CLOG.IF( TAG_COFFEE_BEAN, SHOW_RESOURCE_LOG, \"    url:\" + source_url + \" => \" + url );\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * 异步创建预制体\r\n     */\r\n    public static async createPrefabAsync ( url: string ): Promise<cc.Node> {\r\n        let prefab: cc.Prefab = cc.loader.getRes( url, cc.Prefab ) as cc.Prefab;\r\n\r\n        if ( prefab != null ) {\r\n            return cc.instantiate( prefab );\r\n        }\r\n\r\n        prefab = await this.loadRes( url, cc.Prefab );\r\n        return cc.instantiate( prefab );\r\n    }\r\n\r\n    /**\r\n     * 同步创建预制体\r\n     */\r\n    public static createPrefab ( url: string ): cc.Node {\r\n        let prefab: cc.Prefab = cc.loader.getRes( url, cc.Prefab ) as cc.Prefab;\r\n\r\n        if ( prefab != null ) {\r\n            return cc.instantiate( prefab );\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获得缓存的JSON对象\r\n     *\r\n     * @static\r\n     * @template T\r\n     * @param url JSON路径\r\n     * @returns\r\n     * @memberof CRes\r\n     */\r\n    public static getJson<T> ( url: string ): T {\r\n        let json = this.getRes( url, cc.JsonAsset ).json;\r\n        return json as T;\r\n    }\r\n\r\n    /**\r\n     * 获得图集\r\n     *\r\n     * @static\r\n     * @param url 图集地址\r\n     * @returns\r\n     * @memberof CRes\r\n     */\r\n    public static getSpriteAtlas ( url: string ): cc.SpriteAtlas {\r\n        return this.getRes( url, cc.SpriteAtlas );\r\n    }\r\n\r\n    /**\r\n     * 获得精灵帧\r\n     * 注意！！！ \r\n     * 一般精灵都会合图\r\n     * 直接调用 CRes.getSpriteFrame(url)\r\n     * 无法获取到正确图片\r\n     * \r\n     * 获取合图中散图的方法\r\n     * CRes.getSpriteAtlas(图集路径).getSpriteFrame(精灵名);\r\n     * \r\n     * @static\r\n     * @param url 精灵地址\r\n     * @returns\r\n     * @memberof CRes\r\n     */\r\n    public static getSpriteFrame ( url: string ): cc.SpriteFrame {\r\n        return this.getRes( url, cc.SpriteFrame );\r\n    }\r\n\r\n\r\n    /**\r\n     * 获得文本资源\r\n     * txt,ini,csv等都属于文本资源\r\n     *\r\n     * @static\r\n     * @param url 文本路径\r\n     * @returns\r\n     * @memberof CRes\r\n     */\r\n    public static getText ( url: string ): cc.TextAsset {\r\n        return this.getRes( url, cc.TextAsset );\r\n    }\r\n\r\n    /**\r\n     * 声音资源\r\n     *\r\n     * @static\r\n     * @param url\r\n     * @returns\r\n     * @memberof CRes\r\n     */\r\n    public static getSound ( url: string ): cc.AudioClip {\r\n        return this.getRes( url, cc.AudioClip );\r\n    }\r\n} "]}