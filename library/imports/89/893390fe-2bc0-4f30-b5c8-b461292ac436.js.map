{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\coffee_bean\\utils/assets\\coffee_bean\\utils\\CUI.ts"],"names":[],"mappings":";;;;;;AAAA,+BAA0B;AAE1B;IAAA;IAwEA,CAAC;IAvEG;;;MAGE;IACY,eAAW,GAAzB,UAA4B,GAAY;QACpC,IAAI,WAAW,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;QAC1C,IAAK,WAAW,IAAI,IAAI,EAAG;YACvB,cAAI,CAAC,CAAC,CAAE,qCAAqC,CAAE,CAAC;YAChD,OAAO;SACV;QACD,IAAI,aAAa,GAAG,WAAW,CAAC,cAAc,EAAE,CAAC;QACjD,IAAI,WAAW,GAAG,WAAW,CAAC,cAAc,EAAE,CAAC;QAC/C,IAAI,MAAM,GAAG,IAAI,EAAE,CAAC,IAAI,CAAE,WAAW,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,aAAa,CAAC,CAAC,CAAE,CAAC;QACtG,OAAO,GAAG,CAAC,GAAG,CAAE,MAAM,CAAE,CAAC;IAC7B,CAAC;IAED;;;MAGE;IACY,eAAW,GAAzB,UAA4B,GAAY;QACpC,IAAI,WAAW,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;QAC1C,IAAK,WAAW,IAAI,IAAI,EAAG;YACvB,cAAI,CAAC,CAAC,CAAE,qCAAqC,CAAE,CAAC;YAChD,OAAO;SACV;QACD,IAAI,aAAa,GAAG,WAAW,CAAC,cAAc,EAAE,CAAC;QACjD,IAAI,WAAW,GAAG,WAAW,CAAC,cAAc,EAAE,CAAC;QAC/C,IAAI,MAAM,GAAG,IAAI,EAAE,CAAC,IAAI,CAAE,WAAW,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,aAAa,CAAC,CAAC,CAAE,CAAC;QACtG,OAAO,GAAG,CAAC,GAAG,CAAE,MAAM,CAAE,CAAC;IAC7B,CAAC;IAED;;;;;OAKG;IACW,oBAAgB,GAA9B,UAAiC,IAAY;QACzC,IAAI,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;QAC/B,IAAI,EAAE,GAAG,IAAI,CAAC,YAAY,CAAE,EAAE,CAAC,MAAM,CAAE,CAAC;QACxC,OAAO,CAAE,IAAI,EAAE,EAAE,CAAE,CAAC;IACxB,CAAC;IAED;;;;;;;OAOG;IACW,mBAAe,GAA7B,UAAgC,IAAY;QACxC,IAAI,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;QAC/B,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAE,EAAE,CAAC,KAAK,CAAE,CAAC;QAC1C,OAAO,CAAE,IAAI,EAAE,KAAK,CAAE,CAAC;IAC3B,CAAC;IAED;;;;;;;GAOD;IACe,qBAAiB,GAA/B,UAAkC,IAAY;QAC1C,IAAI,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;QAC/B,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY,CAAE,EAAE,CAAC,QAAQ,CAAE,CAAC;QAC3C,OAAO,CAAE,IAAI,EAAE,GAAG,CAAE,CAAC;IACzB,CAAC;IACL,UAAC;AAAD,CAxEA,AAwEC,IAAA;AAxEY,kBAAG","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\coffee_bean\\utils","sourcesContent":["import CLOG from \"./CLOG\";\r\n\r\nexport class CUI {\r\n    /**\r\n    * 转化画布坐标到屏幕坐标\r\n    * @param pos 要转化的坐标\r\n    */\r\n    public static cpos_2_spos ( pos: cc.Vec2 ): cc.Vec2 {\r\n        let canvas_node = cc.Canvas.instance.node;\r\n        if ( canvas_node == null ) {\r\n            CLOG.E( \"can not find canvas in now scene!!!\" );\r\n            return;\r\n        }\r\n        let canvas_anchor = canvas_node.getAnchorPoint();\r\n        let canvas_size = canvas_node.getContentSize();\r\n        let offset = new cc.Vec2( canvas_size.width * canvas_anchor.x, canvas_size.height * canvas_anchor.y );\r\n        return pos.add( offset );\r\n    }\r\n\r\n    /**\r\n    * 转化屏幕坐标到画布坐标\r\n    * @param pos 要转化的坐标\r\n    */\r\n    public static spos_2_cpos ( pos: cc.Vec2 ): cc.Vec2 {\r\n        let canvas_node = cc.Canvas.instance.node;\r\n        if ( canvas_node == null ) {\r\n            CLOG.E( \"can not find canvas in now scene!!!\" );\r\n            return;\r\n        }\r\n        let canvas_anchor = canvas_node.getAnchorPoint();\r\n        let canvas_size = canvas_node.getContentSize();\r\n        let offset = new cc.Vec2( canvas_size.width * canvas_anchor.x, canvas_size.height * canvas_anchor.y );\r\n        return pos.sub( offset );\r\n    }\r\n\r\n    /**\r\n     * 创建精灵节点\r\n     * 精灵节点可以设置图像\r\n     *\r\n     * @memberof CUI\r\n     */\r\n    public static createSpriteNode ( name: string ): [ cc.Node, cc.Sprite ] {\r\n        let node = new cc.Node( name );\r\n        let sp = node.addComponent( cc.Sprite );\r\n        return [ node, sp ];\r\n    }\r\n\r\n    /**\r\n     * 创建文本节点\r\n     * 文本节点可以设置文字\r\n     *\r\n     * @static\r\n     * @returns\r\n     * @memberof CUI\r\n     */\r\n    public static createLabelNode ( name: string ): [ cc.Node, cc.Label ] {\r\n        let node = new cc.Node( name );\r\n        let label = node.addComponent( cc.Label );\r\n        return [ node, label ];\r\n    }\r\n\r\n    /**\r\n     * 创建绘图节点\r\n     * 绘图节点可以绘制图像\r\n     *\r\n     * @static\r\n     * @returns\r\n     * @memberof CUI\r\n */\r\n    public static createGraphicNode ( name: string ): [ cc.Node, cc.Graphics ] {\r\n        let node = new cc.Node( name );\r\n        let gic = node.addComponent( cc.Graphics );\r\n        return [ node, gic ];\r\n    }\r\n}"]}