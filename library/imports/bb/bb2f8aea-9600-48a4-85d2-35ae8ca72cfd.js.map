{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\coffee_bean\\utils/assets\\coffee_bean\\utils\\CMath.ts"],"names":[],"mappings":";;;;;;AAAA,2CAAiD;AAEjD,uBAAuB;AACV,QAAA,cAAc,GAAW,iCAAiC,CAAC;AAExE,uBAAuB;AACV,QAAA,cAAc,GAAW,kCAAkC,CAAC;AAEzE;;;;;GAKG;AACH;IAAA;IAmGA,CAAC;IAlGG;;;;;;;;OAQG;IACW,iBAAW,GAAzB,UAA4B,GAAW,EAAE,GAAW,EAAE,MAAc;QAChE,OAAO,CAAE,KAAK,CAAE,GAAG,CAAE,CAAC,IAAI,CAAE,MAAM,CAAE,GAAG,GAAG,CAAE,CAAC,KAAK,CAAE,CAAC,GAAG,CAAE,CAAC;IAC/D,CAAC;IAED;;;;;OAKG;IACW,WAAK,GAAnB,UAAsB,GAAW,EAAE,GAAW,EAAE,GAAW;QACvD,IAAK,GAAG,GAAG,GAAG;YACV,GAAG,GAAG,GAAG,CAAC;aACT,IAAK,GAAG,GAAG,GAAG;YACf,GAAG,GAAG,GAAG,CAAC;QACd,OAAO,GAAG,CAAC;IACf,CAAC;IAED;;;;OAIG;IACW,eAAS,GAAvB,UAA0B,GAAW,EAAE,GAAe;QAAf,oBAAA,EAAA,OAAe;QAClD,OAAO,IAAI,CAAC,MAAM,EAAE,GAAG,CAAE,GAAG,GAAG,GAAG,CAAE,GAAG,GAAG,CAAC;IAC/C,CAAC;IAED;;;;OAIG;IACW,aAAO,GAArB,UAAwB,GAAW,EAAE,GAAe;QAAf,oBAAA,EAAA,OAAe;QAChD,OAAO,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAE,GAAG,GAAG,GAAG,CAAE,GAAG,GAAG,CAAE,CAAC;IAC7D,CAAC;IAED;;OAEG;IACW,cAAQ,GAAtB;QACI,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;IACzB,CAAC;IAED;;;OAGG;IACW,oBAAc,GAA5B,UAA+B,KAAa;QACxC,OAAQ,KAAK,IAAI,GAAG,EAAG;YACnB,KAAK,IAAI,GAAG,CAAC;SAChB;QAED,OAAQ,KAAK,GAAG,CAAC,EAAG;YAChB,KAAK,IAAI,GAAG,CAAC;SAChB;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;;;;;;;;;;;;OAaG;IACW,WAAK,GAAnB,UAAsB,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,MAAc,EAAE,MAAc;QACvF,IAAK,GAAG,IAAI,GAAG,EAAG;YAAE,OAAO,MAAM,CAAC;SAAE;QACpC,IAAK,GAAG,IAAI,GAAG,EAAG;YAAE,OAAO,MAAM,CAAC;SAAE;QAEpC,OAAO,CAAE,GAAG,GAAG,GAAG,CAAE,GAAG,CAAE,GAAG,GAAG,GAAG,CAAE,GAAG,CAAE,MAAM,GAAG,MAAM,CAAE,GAAG,MAAM,CAAC;IACxE,CAAC;IAGD;;;;OAIG;IACW,gBAAU,GAAxB,UAA2B,KAAa,EAAE,WAAoD;QAApD,4BAAA,EAAA,cAA4B,oBAAY,CAAC,WAAW;QAC1F,OAAO,IAAI,CAAC,SAAS,CAAE,CAAC,EAAE,WAAW,CAAE,IAAI,KAAK,CAAC;IACrD,CAAC;IACL,YAAC;AAAD,CAnGA,AAmGC,IAAA","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\coffee_bean\\utils","sourcesContent":["import { EPrecentType } from './../common/CEnum';\r\n\r\n/*** 任意弧度直接乘 弧度转角度 ***/\r\nexport const radian_2_angle: number = 57.295779513082320876798154814105;\r\n\r\n/*** 任意角度直接乘 角度转弧度 ***/\r\nexport const angle_2_radius: number = 0.01745329251994329576923690768489;\r\n\r\n/**\r\n * CoffeeBean\r\n * 数学库封装\r\n * \r\n * By Leo\r\n */\r\nexport default class CMath {\r\n    /**\r\n     * 在一个数字 num 前面补上一定数量的  prefix ，长度 = len\r\n     * 返回字符串\r\n     * \r\n     * 如  fixedNumber(123,5,\"0\") => \"00123\";\r\n     * @param num  要补前缀的数字\r\n     * @param len  限定长度\r\n     * @param prefix  前缀字符\r\n     */\r\n    public static fixedNumber ( num: number, len: number, prefix: string ): string {\r\n        return ( Array( len ).join( prefix ) + num ).slice( -len );\r\n    }\r\n\r\n    /**\r\n     * 限定一个数字在最小到最大值之间，返回限定后的值\r\n     * @param num 要限定的数值\r\n     * @param min 下限\r\n     * @param max 上限\r\n     */\r\n    public static clamp ( num: number, min: number, max: number ): number {\r\n        if ( num < min )\r\n            num = min;\r\n        else if ( num > max )\r\n            num = max;\r\n        return num;\r\n    }\r\n\r\n    /**\r\n     * 随机数封装，返回值 [min,max) 介于最小（包含），到最大之间（不包含）\r\n     * @param max 最大值   （不包含）\r\n     * @param min 最小值   （包含）\r\n     */\r\n    public static randFloat ( max: number, min: number = 0 ): number {\r\n        return Math.random() * ( max - min ) + min;\r\n    }\r\n\r\n    /**\r\n     * 随机数封装，返回值 [Min,Max) 介于最小（包含），到最大之间（不包含）\r\n     * @param max 最大值   （不包含）\r\n     * @param min 最小值   （包含）\r\n     */\r\n    public static randInt ( max: number, min: number = 0 ): number {\r\n        return Math.floor( Math.random() * ( max - min ) + min );\r\n    }\r\n\r\n    /**\r\n     * 随机数封装，返回 0-1之间的小数\r\n     */\r\n    public static rand_0_1 (): number {\r\n        return Math.random();\r\n    }\r\n\r\n    /**\r\n     * 让一个角度标准化  归入 [0,360) 度之间\r\n     * @param angle 角度\r\n     */\r\n    public static normalizeAngle ( angle: number ): number {\r\n        while ( angle >= 360 ) {\r\n            angle -= 360;\r\n        }\r\n\r\n        while ( angle < 0 ) {\r\n            angle += 360;\r\n        }\r\n\r\n        return angle;\r\n    }\r\n\r\n    /**\r\n     * 把一个数字从当前的 min,max区间映射到 newMin , newMax区间\r\n     * 例如\r\n     *     remap(50,0,100,20,40) ===> 30\r\n     * 释义 原数字 50  原区间 0-100 \r\n     * 映射到新区间 20-40 \r\n     * 返回数字30\r\n     * \r\n     * @param num 要处理的数字\r\n     * @param min 原缩放区间左值\r\n     * @param max 原缩放区间右值\r\n     * @param newMin 新区间左值\r\n     * @param newMax 新区间右值\r\n     */\r\n    public static remap ( num: number, min: number, max: number, newMin: number, newMax: number ): number {\r\n        if ( num <= min ) { return newMin; }\r\n        if ( num >= max ) { return newMax; }\r\n\r\n        return ( num - min ) / ( max - min ) * ( newMax - newMin ) + newMin;\r\n    }\r\n\r\n\r\n    /**\r\n     * 检查一个概率是否命中\r\n     * @param ratio 概率\r\n     * @param precentType 概率类型 默认为百分比\r\n     */\r\n    public static checkBingo ( ratio: number, precentType: EPrecentType = EPrecentType.PRECENT_100 ): boolean {\r\n        return this.randFloat( 0, precentType ) <= ratio;\r\n    }\r\n} \r\n"]}