{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\coffee_bean\\expand/assets\\coffee_bean\\expand\\CExString.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\coffee_bean\\expand","sourcesContent":["import CMD5 from \"../utils/CMD5\";\r\n\r\n/**\r\n * MD5字符串\r\n *\r\n * @returns MD5加密后的字符串\r\n * @memberof String\r\n */\r\nString.prototype.MD5 = function ( this: string ): string {\r\n    return CMD5.hashStr( this ) as string;\r\n}\r\n\r\n\r\n/**\r\n * 判断一个字符串是否为空\r\n *\r\n * @returns\r\n * @memberof String\r\n */\r\nString.prototype.isEmptyOrNull = function ( this: string ): boolean {\r\n    return this == null || this.length == 0;\r\n}\r\n\r\n\r\n\r\n/**\r\n * 函数:格式化字符串\r\n * 参数：str:字符串模板； data:数据\r\n * 调用方式:formatString(\"api/values/{id}/{name}\",{id:101,name:\"test\"});\r\n *         formatString(\"api/values/{0}/{1}\",101,\"test\");\r\n */\r\nString.formatString = function ( str: string, ...data ): string {\r\n    if ( !str || data == undefined ) {\r\n        return str;\r\n    }\r\n\r\n    if ( str.indexOf( \"{0}\" ) == -1 ) {\r\n        for ( const item of data ) {\r\n            for ( let key in item ) {\r\n                if ( item.hasOwnProperty( key ) ) {\r\n                    str = str.replace( new RegExp( \"\\{\" + key + \"\\}\", \"g\" ), item[ key ] );\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        let args = arguments,\r\n            reg = new RegExp( \"\\{([0-\" + ( args.length - 1 ) + \"])\\}\", \"g\" );\r\n        return str.replace( reg, function ( match, index ) {\r\n            return args[ index - ( -1 ) ];\r\n        } );\r\n    }\r\n    return str;\r\n}\r\n\r\n/** \r\n * 将一个字符串省略一定长度，以特定字符替代 \r\n * 如 \r\n *     String.omitStr('asdgadsgdf',3)  =>  'asd...';\r\n *     String.omitStr('asdgadsgdf',4 ,'*')  =>  'asdg***';\r\n *     String.omitStr('asdgadsgdf',5 ,'$' ,2)  =>  'asdga$$';\r\n * \r\n * @param targetStr 目标字符串\r\n * @param omitStart 保留长度\r\n * @param replacestr 替换字符\r\n * @param replacelen 替换长度\r\n */\r\nString.omitStr = function ( targetStr: string, omitStart: number, replacestr: string = '.', replacelen = 3 ): string {\r\n    if ( targetStr.length <= omitStart ) {\r\n        return targetStr;\r\n    }\r\n    let tail = replacestr.repeat( replacelen );\r\n    return targetStr.substr( 0, omitStart ) + tail;\r\n}\r\n\r\n\r\n/**\r\n * UTF-8数组转字符串\r\n * @param array utf8数组\r\n */\r\nString.Utf8ArrayToStr = function ( array: Array<number> ): string {\r\n    var out, i, len, c;\r\n    var char2, char3, char4;\r\n\r\n    out = \"\";\r\n    len = array.length;\r\n    i = 0;\r\n    while ( i < len ) {\r\n        c = array[ i++ ];\r\n        var pre = ( c >> 3 );\r\n        if ( pre >= 0 && pre <= 15 ) {// 0xxxxxxx\r\n            out += String.fromCharCode( c );\r\n        } else if ( pre >= 24 && pre <= 27 ) {// 110x xxxx   10xx xxxx\r\n            char2 = array[ i++ ];\r\n            out += String.fromCharCode( ( ( c & 0x1F ) << 6 ) | ( char2 & 0x3F ) );\r\n        } else if ( pre >= 28 && pre <= 29 ) {// 1110 xxxx  10xx xxxx  10xx xxxx\r\n            char2 = array[ i++ ];\r\n            char3 = array[ i++ ];\r\n            out += String.fromCharCode( ( ( c & 0x0F ) << 12 ) |\r\n                ( ( char2 & 0x3F ) << 6 ) |\r\n                ( ( char3 & 0x3F ) << 0 ) );\r\n        } else if ( pre == 30 ) {//1111 0xxx  10xx xxxx  10xx xxxx 10xx xxxx\r\n            char2 = array[ i++ ];\r\n            char3 = array[ i++ ];\r\n            char4 = array[ i++ ];\r\n            out += String.fromCharCode(\r\n                ( ( c & 0x07 ) << 15 ) |\r\n                ( ( char2 & 0x3F ) << 12 ) |\r\n                ( ( char3 & 0x3F ) << 6 ) |\r\n                ( ( char4 & 0x3F ) << 0 ) );\r\n        }\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * 十六进制字符串转十进制数字\r\n *\r\n * @param hexstring 十六进制字符串\r\n * @returns 数字\r\n * @memberof StringConstructor\r\n */\r\nString.hexStrtoDecNumber = function ( hexstring: string ): number {\r\n    let num = 0;\r\n    for ( let i = 0; i < hexstring.length; i++ ) {\r\n        const element = hexstring.charAt( i );\r\n        num <<= 4;\r\n\r\n        switch ( element ) {\r\n            case 'A':\r\n            case 'a':\r\n                num += 10;\r\n                break;\r\n            case 'b':\r\n            case 'B':\r\n                num += 11;\r\n                break;\r\n            case 'c':\r\n            case 'C':\r\n                num += 12;\r\n                break;\r\n            case 'd':\r\n            case 'D':\r\n                num += 13;\r\n                break;\r\n            case 'e':\r\n            case 'E':\r\n                num += 14;\r\n                break;\r\n            case 'f':\r\n            case 'F':\r\n                num += 15;\r\n                break;\r\n            default:\r\n                num += parseInt( element );\r\n                break;\r\n        }\r\n    }\r\n\r\n    return num;\r\n}"]}