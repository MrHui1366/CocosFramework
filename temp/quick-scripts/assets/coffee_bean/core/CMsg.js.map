{"version":3,"sources":["CMsg.ts"],"names":[],"mappings":";;;;;AAAA;;;;;GAKG;;AAEH,sCAAiC;AACjC,+BAA8B;AAC9B,6CAAoD;AAYpD;;;;;GAKG;AACH;IAAA;IA0JA,CAAC;IAtJG;;;;;;OAMG;IACW,kBAAa,GAA3B,UAA8B,GAAW,EAAE,OAAiB,EAAE,MAAc,EAAE,IAAqB;QAArB,qBAAA,EAAA,YAAqB;QAC/F,IAAK,GAAG,CAAC,aAAa,EAAE,EAAG;YACvB,cAAI,CAAC,CAAC,CAAE,yBAAe,EAAE,0BAA0B,CAAE,CAAC;YACtD,OAAO;SACV;QAED,IAAK,MAAM,IAAI,IAAI,IAAI,OAAO,IAAI,IAAI,EAAG;YACrC,cAAI,CAAC,CAAC,CAAE,yBAAe,EAAE,6BAA6B,CAAE,CAAC;YACzD,OAAO;SACV;QAED,kBAAkB;QAClB,IAAK,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAE,GAAG,CAAE,EAAG;YAClC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAE,GAAG,EAAE,IAAI,KAAK,EAAgB,CAAE,CAAC;SAC5D;QAED,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC;QAE9C,SAAS;QACT,KAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAG;YACzC,IAAM,IAAI,GAAG,SAAS,CAAE,CAAC,CAAE,CAAC;YAC5B,IAAK,IAAI,CAAC,OAAO,IAAI,OAAO,IAAI,IAAI,CAAC,MAAM,IAAI,MAAM,EAAG;gBACpD,OAAO;aACV;SACJ;QAED,KAAK;QACL,2BAA2B;QAC3B,SAAS,CAAC,IAAI,CAAE,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,CAAE,CAAC;IAC7E,CAAC;IAED;;;;OAIG;IACW,gBAAW,GAAzB,UAA4B,GAAW;QAAE,gBAAa;aAAb,UAAa,EAAb,qBAAa,EAAb,IAAa;YAAb,+BAAa;;QAClD,OAAO;QACP,IAAK,GAAG,CAAC,aAAa,EAAE,EAAG;YACvB,cAAI,CAAC,CAAC,CAAE,yBAAe,EAAE,+BAA+B,CAAE,CAAC;YAC3D,OAAO;SACV;QAED,cAAc;QACd,IAAK,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAE,GAAG,CAAE,EAAG;YAClC,OAAO;SACV;QAED,YAAY;QACZ,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC;QAE7C,OAAO;QACP,IAAI,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC;QAEpC,mBAAmB;QACnB,KAAM,IAAI,CAAC,GAAG,aAAa,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAG;YAC3C,IAAM,IAAI,GAAG,QAAQ,CAAE,CAAC,CAAE,CAAC;YAE3B,IAAK,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAG;gBAC/C,YAAY;gBACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,IAAI,CAAC,MAAM,CAAE,CAAE,MAAM,CAAE,CAAC;gBAC3C,IAAK,IAAI,CAAC,IAAI,EAAG;oBACb,UAAU;oBACV,QAAQ,CAAC,MAAM,CAAE,CAAC,EAAE,CAAC,CAAE,CAAC;iBAC3B;aACJ;iBAAM;gBACH,UAAU;gBACV,QAAQ,CAAC,MAAM,CAAE,CAAC,EAAE,CAAC,CAAE,CAAC;aAC3B;SACJ;IAEL,CAAC;IAED;;;;;OAKG;IACW,kBAAa,GAA3B,UAA8B,GAAW,EAAE,OAAiB,EAAE,MAAW;QACrE,IAAK,GAAG,CAAC,aAAa,EAAE,EAAG;YACvB,cAAI,CAAC,CAAC,CAAE,yBAAe,EAAE,0BAA0B,CAAE,CAAC;YACtD,OAAO;SACV;QAED,IAAK,MAAM,IAAI,IAAI,IAAI,OAAO,IAAI,IAAI,EAAG;YACrC,cAAI,CAAC,CAAC,CAAE,yBAAe,EAAE,6BAA6B,CAAE,CAAC;YACzD,OAAO;SACV;QAGD,cAAc;QACd,IAAK,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAE,GAAG,CAAE,EAAG;YAClC,OAAO;SACV;QAED,YAAY;QACZ,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC;QAE7C,OAAO;QACP,IAAI,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC;QAEpC,mBAAmB;QACnB,KAAM,IAAI,CAAC,GAAG,aAAa,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAG;YAC3C,IAAM,IAAI,GAAG,QAAQ,CAAE,CAAC,CAAE,CAAC;YAE3B,YAAY;YACZ,IAAK,IAAI,CAAC,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC,OAAO,IAAI,OAAO,EAAG;gBACpD,QAAQ,CAAC,MAAM,CAAE,CAAC,EAAE,CAAC,CAAE,CAAC;aAC3B;SACJ;IACL,CAAC;IAGD;;OAEG;IACW,wBAAmB,GAAjC,UAAoC,MAAW;QAC3C,IAAK,MAAM,IAAI,IAAI,EAAG;YAClB,cAAI,CAAC,CAAC,CAAE,yBAAe,EAAE,uDAAuD,CAAE,CAAC;YACnF,OAAO;SACV;QAED,IAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;QACvC,KAAM,IAAI,CAAC,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAG;YACtC,IAAI,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAE,CAAC,CAAE,CAAC;YACzC,KAAM,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAG;gBAC/C,IAAK,IAAI,CAAC,KAAK,CAAE,CAAC,CAAE,CAAC,MAAM,IAAI,MAAM,EAAG;oBACpC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAE,IAAI,CAAC,GAAG,CAAE,CAAC;iBACzC;aACJ;SACJ;IACL,CAAC;IAED;;;OAGG;IACW,qBAAgB,GAA9B,UAAiC,GAAW;QACxC,IAAK,IAAI,CAAC,aAAa,CAAC,GAAG,CAAE,GAAG,CAAE,EAAG;YACjC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAE,GAAG,CAAE,CAAC;SACpC;IACL,CAAC;IAvJc,kBAAa,GAAsC,IAAI,WAAI,EAA+B,CAAC;IAwJ9G,WAAC;CA1JD,AA0JC,IAAA;kBA1JoB,IAAI","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\coffee_bean\\core","sourcesContent":["/**\r\n * CoffeeBean\r\n * 消息库封装\r\n * \r\n * By Leo\r\n */\r\n\r\nimport CLOG from \"../utils/CLOG\";\r\nimport { CMap } from \"./CMap\";\r\nimport { TAG_COFFEE_BEAN } from \"../common/CGlobal\";\r\n\r\n/*** 事件处理 ***/\r\ninterface EventHandler {\r\n    /*** 处理函数 ***/\r\n    handler: Function;\r\n    /*** 目标 ***/\r\n    target: object;\r\n    /*** 是否只触发一次 ***/\r\n    once: boolean;\r\n}\r\n\r\n/**\r\n * 自定义消息处理器\r\n *\r\n * @export\r\n * @class CMsg\r\n */\r\nexport default class CMsg {\r\n\r\n    private static msgHandleList: CMap<string, Array<EventHandler>> = new CMap<string, Array<EventHandler>>();\r\n\r\n    /**\r\n     * 注册一个消息处理\r\n     * @param msg 消息名\r\n     * @param handler 处理函数\r\n     * @param target 目标对象\r\n     * @param once 是否只触发一次\r\n     */\r\n    public static addMsgHandler ( msg: string, handler: Function, target: object, once: boolean = false ): void {\r\n        if ( msg.isEmptyOrNull() ) {\r\n            CLOG.E( TAG_COFFEE_BEAN, \"add msg is null or empty\" );\r\n            return;\r\n        }\r\n\r\n        if ( target == null || handler == null ) {\r\n            CLOG.E( TAG_COFFEE_BEAN, \"target or handler is null!!\" );\r\n            return;\r\n        }\r\n\r\n        /*** 若该事件未被注册 ***/\r\n        if ( !this.msgHandleList.has( msg ) ) {\r\n            this.msgHandleList.set( msg, new Array<EventHandler>() );\r\n        }\r\n\r\n        let container = this.msgHandleList.get( msg );\r\n\r\n        // 防止反复注册\r\n        for ( let i = 0; i < container.length; i++ ) {\r\n            const item = container[ i ];\r\n            if ( item.handler == handler && item.target == target ) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        // 注册\r\n        // 为了区分参数和接口属性名而不得以添加引号进行区分\r\n        container.push( { 'handler': handler, 'target': target, 'once': once } );\r\n    }\r\n\r\n    /**\r\n     * 派发事件\r\n     * @param msg 要派发的事件\r\n     * @param params 参数列表\r\n     */\r\n    public static dispatchMsg ( msg: string, ...params: [] ): void {\r\n        // 安全检查\r\n        if ( msg.isEmptyOrNull() ) {\r\n            CLOG.E( TAG_COFFEE_BEAN, \"dispatch msg is null or empty\" );\r\n            return;\r\n        }\r\n\r\n        // 没有注册该消息时的处理\r\n        if ( !this.msgHandleList.has( msg ) ) {\r\n            return;\r\n        }\r\n\r\n        // 得到所有注册的处理\r\n        let handlers = this.msgHandleList.get( msg );\r\n\r\n        // 得到数量\r\n        let handler_count = handlers.length;\r\n\r\n        // 倒序遍历，防止删除引起的循环异常\r\n        for ( let i = handler_count - 1; i >= 0; i-- ) {\r\n            const item = handlers[ i ];\r\n\r\n            if ( item.target != null && item.handler != null ) {\r\n                // 存在处理对象才调用\r\n                item.handler.bind( item.target )( params );\r\n                if ( item.once ) {\r\n                    // 否则移除调用者\r\n                    handlers.splice( i, 1 );\r\n                }\r\n            } else {\r\n                // 否则移除调用者\r\n                handlers.splice( i, 1 );\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 移除一个事件监听\r\n     * @param msg 要移除的消息\r\n     * @param handler 要移除的处理函数\r\n     * @param target 目标对象\r\n     */\r\n    public static removeHandler ( msg: string, handler: Function, target: any ): void {\r\n        if ( msg.isEmptyOrNull() ) {\r\n            CLOG.E( TAG_COFFEE_BEAN, \"add msg is null or empty\" );\r\n            return;\r\n        }\r\n\r\n        if ( target == null || handler == null ) {\r\n            CLOG.E( TAG_COFFEE_BEAN, \"target or handler is null!!\" );\r\n            return;\r\n        }\r\n\r\n\r\n        // 没有注册该消息时的处理\r\n        if ( !this.msgHandleList.has( msg ) ) {\r\n            return;\r\n        }\r\n\r\n        // 得到所有注册的处理\r\n        var handlers = this.msgHandleList.get( msg );\r\n\r\n        // 得到数量\r\n        var handler_count = handlers.length;\r\n\r\n        // 倒序遍历，防止删除引起的循环异常\r\n        for ( let i = handler_count - 1; i >= 0; i-- ) {\r\n            const item = handlers[ i ];\r\n\r\n            // 存在处理对象才调用\r\n            if ( item.target == target && item.handler == handler ) {\r\n                handlers.splice( i, 1 );\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /** \r\n     * 移除一个目标身上所有事件监听\r\n     */\r\n    public static removeTargetHandler ( target: any ): void {\r\n        if ( target == null ) {\r\n            CLOG.E( TAG_COFFEE_BEAN, \"removeTargetHandler param is incorrect! target = null\" );\r\n            return;\r\n        }\r\n\r\n        let msgCount = this.msgHandleList.size;\r\n        for ( let i = msgCount - 1; i >= 0; i-- ) {\r\n            let item = this.msgHandleList.getKV( i );\r\n            for ( let j = item.value.length - 1; j >= 0; j-- ) {\r\n                if ( item.value[ j ].target == target ) {\r\n                    this.msgHandleList.delete( item.key );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除一个事件消息的所有监听\r\n     * @param msg 要移除的消息\r\n     */\r\n    public static removeAllHandler ( msg: string ): void {\r\n        if ( this.msgHandleList.has( msg ) ) {\r\n            this.msgHandleList.delete( msg );\r\n        }\r\n    }\r\n}"]}