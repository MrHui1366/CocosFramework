{"version":3,"sources":["CHTTP.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\coffee_bean\\network","sourcesContent":["/** \r\n * CoffeeBean\r\n * HTTP库\r\n * 自动异步队列\r\n * \r\n * By Leo\r\n */\r\n\r\nimport CLOG from \"../utils/CLOG\";\r\nimport { CLoading } from \"../component/CLoading\";\r\nconst HTTP_TAG: string = \"HTTP\";\r\n\r\n/**\r\n * HTTP 任务\r\n */\r\nexport class CHTTPTask {\r\n    /** Http 请求地址 */\r\n    public url: string;\r\n    /** 请求对象 */\r\n    public data: string;\r\n    /** 回调函数 参数1 是否成功  参数2 服务器返回 body */\r\n    public caller: ( boolean, string ) => void;\r\n    /** 是否显示waiting */\r\n    public showLoading: boolean;\r\n}\r\n\r\n/** CoffeeBean\r\n   * HTTP请求库\r\n   * \r\n   * By Leo\r\n   */\r\nexport class CHTTP {\r\n    /**\r\n     * 任务队列\r\n     */\r\n    private static taskList: Array<CHTTPTask> = new Array<CHTTPTask>();\r\n\r\n    /**\r\n     * 是否正在运行\r\n     */\r\n    private static hasRun: boolean = false;\r\n\r\n    /**\r\n     * 发送请求\r\n     * @param URL 请求地址\r\n     * @param data 发送的数据对象\r\n     * @param showWating 是否需要显示Waiting\r\n     * @param handler 回调函数\r\n     */\r\n    public static Post ( url: string, data: string, showWating: boolean = true, handler: ( boolean, object ) => void ): void {\r\n        let task = new CHTTPTask();\r\n        task.url = url;\r\n        task.data = data;\r\n        task.caller = handler;\r\n        task.showLoading = showWating\r\n\r\n        // 添加到任务队列\r\n        this.taskList.push( task );\r\n\r\n        // 若处理器没有启动\r\n        if ( !this.hasRun ) {\r\n            // 启动他\r\n            this.handleHTTP();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理HTTP请求\r\n     */\r\n    private static async handleHTTP () {\r\n        while ( this.taskList.length > 0 ) {\r\n            this.hasRun = true;\r\n\r\n            // 执行任务队列\r\n            let task = this.taskList.shift();\r\n            let url = task.url;\r\n            let data = task.data;\r\n            let caller = task.caller;\r\n\r\n            // 等待异步任务\r\n            let result: [ boolean, string ] = await new Promise<[ boolean, string ]>( ( resolve, reject ) => {\r\n                // 需要显示Loading则显示\r\n                if ( task.showLoading ) {\r\n                    CLoading.show();\r\n                }\r\n\r\n                CLOG.I( HTTP_TAG, \"== HTTP REQUEST ==\" );\r\n                CLOG.I( HTTP_TAG, \"URL:\" + url );\r\n                CLOG.I( HTTP_TAG, \"data:\" + data );\r\n\r\n                let http_req = new XMLHttpRequest();\r\n                http_req.onreadystatechange = () => {\r\n                    if ( http_req.readyState == 4 ) {\r\n                        CLOG.I( HTTP_TAG, \"== HTTP RESPONSE ==\" );\r\n                        CLOG.I( HTTP_TAG, \"state:\" + http_req.statusText );\r\n                        CLOG.I( HTTP_TAG, \"data:\" + http_req.responseText );\r\n\r\n                        // 需要显示Loading则隐藏\r\n                        if ( task.showLoading ) {\r\n                            CLoading.hide();\r\n                        }\r\n\r\n                        if ( http_req.status == 200 ) {\r\n                            resolve( [ true, http_req.responseText ] );\r\n                        } else {\r\n                            CLOG.E( HTTP_TAG, \"xmlhttprequest status:\" + http_req.status );\r\n                            // PopUpView.showUI(\"网络异常，请稍后重试\",\"好的\",null,(isOK)=>{\r\n                            //     resolve( [ false, \"\" ] );\r\n                            // });\r\n                        }\r\n                    }\r\n                };\r\n                http_req.open( \"post\", url, true );\r\n                http_req.setRequestHeader( \"Content-Type\", \"application/x-www-form-urlencoded;charset=UTF-8\" );\r\n                http_req.send( data );\r\n            } );\r\n\r\n            // 异步执行结束，执行回调\r\n            if ( caller != null ) {\r\n                caller( result[ 0 ], JSON.parse( result[ 1 ] ) );\r\n            }\r\n        }\r\n\r\n        this.hasRun = false;\r\n    }\r\n}"]}